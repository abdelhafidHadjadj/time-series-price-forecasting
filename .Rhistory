dt
dt=data.frame(
ID = c(seq(1,4,1)),
Name = c("Hafid", "Zako", "Rahimo", "Driss"),
Age = c(23, 20, 26, 26)
)
dt
str(dt)
dt=data.frame(
ID = c(seq(1,4,1)),
Name = c("Hafid", "Zako", "Rahimo", "Driss"),
Age = c(23, 20, 26, 26)
)
dt
str(dt)
dt$Name
dt=data.frame(
ID = c(seq(1,4,1)),
Name = c("Hafid", "Zako", "Rahimo", "Driss"),
Age = c(23, 20, 26, 26)
)
dt
str(dt)
dt$ID
dt[1]
rx=rnorm(100, 10, sd=2)
rx
rx=rnorm(100, 10, sd=2)
rx
dx=dnorm
dx
rx=rnorm(100, 10, sd=2)
rx
dx=dnorm(8, 10, 2)
dx
rx=rnorm(100, 10, sd=2)
rx
dx=dnorm(8, 10, 2)
dx
px=pnorm(12, mean = 10, sd = 2)
rx=rnorm(100, 10, sd=2)
rx
dx=dnorm(8, 10, 2)
dx
px=pnorm(12, mean = 10, sd = 2)
px
typeof(2)
typeof(4)
typeof("s")
fct(2,3,8)
fct <- function(a,b,c) {
if (typeof(a) == "double" && typeof(b) == "double" && typeof(c) == "double") {
sum = a+b+c
mul = a*b*c
div = a/b/c
moy = sum/3
return("sum = ", sum "| mul = ", mul, "| div = ", div, "| moy = ", moy)
fct <- function(a,b,c) {
if (typeof(a) == "double" && typeof(b) == "double" && typeof(c) == "double") {
som = a+b+c
mul = a*b*c
div = a/b/c
moy = som/3
return("sum = ", som "| mul = ", mul, "| div = ", div, "| moy = ", moy)
fct <- function(a,b,c) {
if (is.numeric(a) && is.numeric(b) && is.numeric(c)) {
som <- a+b+c
mul <- a*b*c
div <- a/b/c
moy <- som/3
return("sum = ", som "| mul = ", mul, "| div = ", div, "| moy = ", moy)
fct <- function(a,b,c) {
if (is.numeric(a) && is.numeric(b) && is.numeric(c)) {
som <- a+b+c
mul <- a*b*c
div <- a/b/c
moy <- som/3
return(paste("sum = ", som "| mul = ", mul, "| div = ", div, "| moy = ", moy))
fct <- function(a, b, c) {
if (is.numeric(a) && is.numeric(b) && is.numeric(c)) {
som <- a + b + c
mul <- a * b * c
div <- a / b / c
moy <- som / 3
# Use commas in paste to separate arguments
return(paste("sum =", som, "| mul =", mul, "| div =", div, "| moy =", moy))
} else {
print("L’entrée n’est pas un nombre.")
}
}
# Test the function
fct(2, 3, 8)
fct <- function(a,b,c) {
if (is.numeric(a) && is.numeric(b) && is.numeric(c)) {
som <- a+b+c
mul <- a*b*c
div <- a/b/c
moy <- som/3
return(paste("sum = ", som "| mul = ", mul, "| div = ", div, "| moy = ", moy))
fct <- function(a,b,c) {
if (is.numeric(a) && is.numeric(b) && is.numeric(c)) {
som <- a+b+c
mul <- a*b*c
div <- a/b/c
moy <- som/3
return(paste("sum = ", som, "| mul = ", mul, "| div = ", div, "| moy = ", moy))
} else {
print("l’entré n’est pas un nombre.")
}
}
fct(2,3,8)
fct <- function(a,b,c) {
if (is.numeric(a) && is.numeric(b) && is.numeric(c)) {
som <- a+b+c
mul <- a*b*c
div <- a/b/c
moy <- som/3
return(c(addition= som, multiplication=mul, division=div, moyenne=moy))
} else {
print("l’entré n’est pas un nombre.")
}
}
fct(2,3,8)
fct(2,3,8)
typeof(fct(2,3,8))
length(fct(2,3,8))
fct2 <- function(x, n) {
rac <- sqrt(x)
nb <- x^n
fac <- factorial(x)
return(c(racine=rac, puissance=nb, factorial=fac))
}
fct2(3,2)
fct2 <- function(x, n) {
if(!is.numeric(x) || is.numeric(n) || n < 0) {
return("Les entrées doivent être des nombres, et n doit être >= 0.")
}
rac <- sqrt(x)
nb <- x^n
fac <- factorial(x)
return(list(racine=rac, puissance=nb, factorial=fac))
}
fct2(3,2)
fct2 <- function(x, n) {
if(!is.numeric(x) || !is.numeric(n) || n < 0) {
return("Les entrées doivent être des nombres, et n doit être >= 0.")
}
rac <- sqrt(x)
nb <- x^n
fac <- factorial(x)
return(list(racine=rac, puissance=nb, factorial=fac))
}
fct2(3,2)
fct3 <- function(vec1, vec2) {
return(c(vec1, vec2))
}
fct3(c(1,2,6), c("a", "b"))
fct3 <- function(vec1, vec2) {
return(c(vec1, vec2))
}
fct3(c(1,2,6), c("a", "b"))
typeof(fct3(c(1,2,6), c("a", "b")))
length(fct3(c(1,2,6), c("a", "b")))
fct3 <- function(vec1, vec2) {
return(c(vec1, vec2))
}
fct3(c(1,2,6), c(5, 3))
typeof(fct3(c(1,2,6), c(9, 3)))
length(fct3(c(1,2,6), c("a", "b")))
fct4 <- function(txt) {
n = length(txt)
reversedString=""
for (i in n) {
reversedString += txt[i]
fct4 <- function(txt) {
n = length(txt)
reversedString=""
for (i in n) {
reversedString = reversedString + txt[i]
}
return(txt)
}
fct4("Hello")
fct4 <- function(txt) {
n <- length(txt)
reversedString=""
for (i in n) {
reversedString = reversedString + txt[i]
}
return(txt)
}
fct4("Hello")
nchar("hi")
seq(nchar("hello"), 1)
seq(char("hello"), 1)
seq(nchar("hello"), 1)
seq(5, 1)
seq(4, 1)
fct4 <- function(txt) {
reversedString=""
for (i in seq(nchar(txt), 1)) {
reversedString = reversedString + txt[i]
}
return(txt)
}
fct4 <- function(txt) {
reversedString=""
for (i in seq(nchar(txt), 1)) {
reversedString = reversedString + txt[i]
}
return(txt)
}
fct4("hello")
fct4 <- function(txt) {
reversedString <- ""
for (i in seq(nchar(txt), 1)) {
reversedString <- paste0(reversedString , substr(txt, i, i))
}
return(txt)
}
fct4("hello")
fct4 <- function(txt) {
reversedString <- ""
for (i in seq(nchar(txt), 1)) {
reversedString <- paste0(reversedString , substr(txt, i, i))
}
return(reversedString)
}
fct4("hello")
substr("hafid", 2)
substr("hafid", 2, 3)
strsplit("i know", "")
x <- strsplit("i know", "")
rev(x)
x <- strsplit("i know", "")[[1]]
rev(x)
fct4 <- function(txt) {
reversedString <- ""
for (i in seq(nchar(txt), 1)) {
reversedString <- paste0(reversedString , substr(txt, i, i))
}
return(reversedString)
}
fct4("i know")
fct5 <- function(txt) {
x <- strsplit("i know", "")[[1]]
y <- rev(x)
return y
fct5 <- function(txt) {
x <- strsplit("i know", "")[[1]]
y <- rev(x)
return(y)
}
fct5("i know")
fct5 <- function(txt) {
x <- strsplit("i know", "")[[1]]
y <- rev(x)
return(paste(y, collapse= "")
}
fct5 <- function(txt) {
x <- strsplit("i know", "")[[1]]
y <- rev(x)
return(paste(y, collapse= "") )
}
fct5("i know")
fct6 <- function(vec) {
return(c(somme=sum(vec), max=max(vec), min=min(vec)))
}
fct6(c(1,2,3))
x=c(12,9,17,11,13,15,13,12,9,3,5,12,13,11,11,13,15,9,13,12,1,11,5,10,16,12,3,8,7,0)
n=length(x)
x1=table(x)
x2=cumsum(x1)
x=c(12,9,17,11,13,15,13,12,9,3,5,12,13,11,11,13,15,9,13,12,1,11,5,10,16,12,3,8,7,0)
n=length(x)
x1=table(x)
x2=cumsum(x1)
n
x1
x2
x=c(12,9,17,11,13,15,13,12,9,3,5,12,13,11,11,13,15,9,13,12,1,11,5,10,16,12,3,8,7,0)
n=length(x)
x1=table(x)
x2=cumsum(x1)
n
x1
x2
t=data.frame(
Modalites= as.numeric(names(x1)),        # Data
Effectives=as.numeric(x1),               # Frequences
Effectives_cumulées=as.numeric(x2),      # Frequences Cum
Frequences=as.numeric(x1)/n,             # Frequences %
Frequences=as.numeric(x2)/n              # Frequences en % Cum
)
t
ifelse(x>0, "positive", "negative")
ifelse(a>0, "positive", "negative")
a=2
ifelse(a>0, "positive", "negative")
a=-2
ifelse(a>0, "positive", "negative")
exp = 2
z=switch(exp,
1 = "sum",
exp = 2
z=switch(exp,
1 <- "sum",
2 <- "mul",
3 <- "div"
)
z=switch(exp,
1 = "sum",
z=switch(exp,
1 = "sum",
exp = 2
z=switch(exp,
1 = "sum",
i = 0
while (i < 5) {
i = i + 1
print(i)
}
day = "monday"
switch(day,
"monday" = 1,
"tuesday" = 2,
"sunday" = 3
)
day = "sunday"
switch(day,
"monday" = 1,
"tuesday" = 2,
"sunday" = 3
)
day = "snday"
switch(day,
"monday" = 1,
"tuesday" = 2,
"sunday" = 3
)
c(1:5)
matrix(c(1:4), 2 , 2)
m1 = matrix(c(1:4), 2 , 2)
m2 = matrix(c(4:10), 3, 2)
m1 = matrix(c(1:4), 2 , 2)
m2 = matrix(c(4:10), 2, 2)
m1 = matrix(c(1:4), 2 , 2)
m2 = matrix(c(5:10), 2, 2)
m1 = matrix(c(1:4), 2 , 2)
m2 = matrix(c(5:10), 3, 2)
m1 = matrix(c(1:4), 2 , 2)
m2 = matrix(c(5:10), 3, 2)
m1
m2
m1 = matrix(c(1:4), 2 , 2)
m2 = matrix(c(5:10), 3, 2)
m1
m2
mcomb=cbind(m1, m2)
m1 = matrix(c(1:4), 2 , 2)
m2 = matrix(c(5:10), 3, 2)
m1
m2
mcomb=cbind(m1, m2)
m1 = matrix(c(1:4), 2 , 2)
m2 = matrix(c(5:8), 2, 2)
m1
m2
mcomb=cbind(m1, m2)
mcomb
m1 = matrix(c(1:4), 2 , 2)
m2 = matrix(c(5:8), 2, 2)
m1
m2
comb=cbind(m1, m2)
comb
romb=rbind(m1, m2)
romb
dis_norm = rnorm(n=100, mean = 10, sd=2)
dis_norm
dis_norm = rnorm(n=100, mean = 10, sd=2)
dis_norm
density_norm= dnorm(dis_norm, mean= mean(dis_norm), sd=sd(dis_norm))
density_norm
dis_binomiale=rbinom(n=100, size=10, 0.5)
dis_binomiale
dis_binomiale=rbinom(n=100, size=10, 0.5)
dis_binomiale
table(dis_binomiale)
stop("Le fichier 'nasdaq_cleaned.csv' n'a pas été trouvé.")
# Définir un miroir CRAN
options(repos = c(CRAN = "https://cloud.r-project.org"))
# Installer et charger les packages nécessaires
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
library(dplyr)
library(ggplot2)
# Vérifiez le répertoire de travail actuel
setwd("C:/Users/hadja/Desktop/TP_STAT")
cat("Répertoire de travail actuel:", getwd(), "\n")
# Vérifier que le fichier existe avant de le charger
if ("nasdaq_cleaned.csv" %in% list.files()) {
data <- read.csv("nasdaq_cleaned.csv")
cat("Le fichier a été chargé avec succès.\n")
# Vérifier les colonnes disponibles
cat("Colonnes disponibles :", names(data), "\n")
# Convertir la colonne 'Date' en format Date
if ("Date" %in% names(data)) {
data$Date <- as.Date(data$Date, format = "%Y-%m-%d")
} else {
stop("La colonne 'Date' est absente du fichier.")
}
# Afficher les premières lignes pour vérifier les données
cat("Aperçu des données :\n")
print(head(data))
} else {
stop("Le fichier 'nasdaq_cleaned.csv' n'a pas été trouvé dans le répertoire de travail actuel.")
}
# Statistiques descriptives
if (all(c("Open", "Close") %in% names(data))) {
stats <- data %>%
summarise(
mean_open = mean(Open, na.rm = TRUE),
sd_open = sd(Open, na.rm = TRUE),
mean_close = mean(Close, na.rm = TRUE),
sd_close = sd(Close, na.rm = TRUE)
)
cat("Statistiques descriptives :\n")
print(stats)
} else {
stop("Les colonnes 'Open' et/ou 'Close' sont absentes du fichier.")
}
# Visualisation des prix d'ouverture et de fermeture
if ("Date" %in% names(data) && all(c("Open", "Close") %in% names(data))) {
ggplot(data, aes(x = Date)) +
geom_line(aes(y = Open, color = "Open"), size = 1) +
geom_line(aes(y = Close, color = "Close"), size = 1) +
labs(
title = "Prix d'ouverture et de fermeture au fil du temps",
x = "Date",
y = "Prix"
) +
scale_color_manual(values = c("Open" = "blue", "Close" = "red")) +
theme_minimal()
} else {
stop("Les colonnes nécessaires pour la visualisation sont absentes.")
}
library(tseries)
library(forecast)
library(forecast)
# Vérifier que le fichier existe avant de le charger
if ("nasdaq_cleaned.csv" %in% list.files()) {
data <- read.csv("nasdaq_cleaned.csv")
print(head(data))  # Afficher les premières lignes pour vérifier les données
} else {
stop("Le fichier 'nasdaq_cleaned.csv' n'a pas été trouvé.")
}
open_data <- data$Open
close_data <- data$Close
summary(open_data)
summary(close_data)
hist(open_data,
main="Distribution des prix d'ouverture",
xlab="Prix",
col="blue")
hist(close_data,
main = "Distribution des prix de fermeture",
xlab = "Prix",
col = "green")
adf.test(close_data)  # Augmented Dickey-Fuller Test
data$Close_diff <- c(NA, diff(data$Close, differences = 1))
head(data)
data <- na.omit(data)
head(data)
# Visualisation après transformation
plot.ts(data$Close_diff, main="Prix de fermeture différenciés", ylab="Prix", col="blue")
#Décomposition de la série temporelle
# Remplacez la fréquence selon vos données
close_ts <- ts(close_data, frequency=30)
# Décomposition
stl_decomp <- stl(close_ts, s.window="periodic")
# Visualisation
plot(stl_decomp)
# Identification automatique des paramètres ARIMA
arima_model <- auto.arima(close_ts)
# Résumé du modèle
summary(arima_model)
# Visualisation des résidus
checkresiduals(arima_model)
# Division des données en ensemble d’apprentissage et de test
# Taille de l'ensemble d'entraînement
train_size <- round(0.8 * length(close_ts))
# Ensemble d'entraînement : les premiers 'train_size' éléments
train <- close_ts[1:train_size]
# Ensemble de test : les éléments restants après 'train_size'
test <- close_ts[(train_size + 1):length(close_ts)]
# Ajustement du modèle sur les données d'apprentissage
arima_train <- auto.arima(train)
# Prédictions sur l'ensemble de test
forecast_test <- forecast(arima_train, h=length(test))
# Évaluation de la performance
rmse <- sqrt(mean((forecast_test$mean - test)^2))
print(paste("RMSE: ", rmse))
# Prévisions futures
# Prévisions pour 30 jours
future_forecast <- forecast(arima_model, h=30)
plot(future_forecast)
# Intervalles de confiance inclus dans le graphique
print(future_forecast)
predictions <- future_forecast$mean
print(predictions)  # Afficher les prix prédits
write.csv(data.frame(future_forecast), "prix_predictifs.csv", row.names = FALSE)
